// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}


model User {
  id            String    @id @default(cuid())
  
  name          String?
  bio           String?
  email         String    @unique
  publicEmail   Boolean?
  salt          String?
  password      String?
  emailVerified DateTime?
  image         String?
  isOnboarded   Boolean   @default(false)
  isOnTrial     Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  refCode       String?
  customRefCode String?
  streetAddress String?
  city          String?
  state         String?
  postalCode    String?
  country       String?
  currency      String?
  // orders        Order[]
  socialLink    SocialLink?
  accounts      Account[]
 
  sessions      Session[]
  workouts      Workout[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Workout {
  id          String   @id @default(cuid())
  title       String
  description String
  duration    Int
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("workout")
}


model SocialLink {
  id           String   @id @default(cuid())
  instagramUrl String?
  twitterUrl   String?
  githubUrl    String?
  discordUrl   String?
  userId       String   @unique // Ensuring one-to-one relationship
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("social_links")
}


enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
}


model NewsletterEmails {
  id           Int      @id @default(autoincrement())
  email        String   @unique
  isNotified   Boolean  @default(false)
  createdAt    DateTime @default(now())

  @@map("newsletter_emails")
}

model PromoCode {
  id          String   @id @default(cuid())
  code        String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  expiryDate  DateTime
  discount    Int
  maxUses     Int
  description String

  @@map("promo_codes")
}

