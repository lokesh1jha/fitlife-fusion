generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("account")
}



model User {
  id                 String            @id @default(cuid())
  name               String?
  bio                String?
  email              String            @unique
  publicEmail        Boolean?
  salt               String?
  password           String?
  emailVerified      DateTime?
  role               Role              @default(USER)
  image              String?
  isOnboarded        Boolean           @default(false)
  isOnTrial          Boolean           @default(true)
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  refCode            String?
  customRefCode      String?
  streetAddress      String?
  city               String?
  state              String?
  postalCode         String?
  country            String?
  currency           String?
  socialLink         SocialLink?
  accounts           Account[]
  workouts           Workout[]
  subscriptionPlan   SubscriptionPlan? @relation(fields: [subscriptionPlanId], references: [id])
  subscriptionPlanId Int?
  trialEndsAt        DateTime?
  credits            UserCredits?
  workoutPlans       WorkoutPlan[]
  dietPlans          DietPlan[]
  meetings           Meeting[]         @relation("UserMeetings")
  trainings          Meeting[]         @relation("TrainerMeetings")
  payments           Payment[]

  goal                 String?
  experienceLevel      String?
  preferredDaysPerWeek Int?

  @@map("users")
}

model SocialLink {
  id        Int      @id @default(autoincrement())
  userId    String   @unique
  facebookUrl  String?
  instagramUrl String?
  twitterUrl   String?
  youtubeUrl   String?
  tiktokUrl    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("socialLink")
}

model SubscriptionPlan {
  id            Int      @id @default(autoincrement())
  name          String
  description   String?
  pricePerMonth Decimal  @db.Decimal(10, 2)
  credits       Int
  maxMeetings   Int
  maxDietPlans  Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  users User[]

  @@map("subscriptionPlan")
}

model UserCredits {
  id        Int      @id @default(autoincrement())
  userId    String   @unique
  credits   Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("userCredits")
}

model Workout {
  id          String   @id @default(cuid())
  title       String
  description String
  duration    Int
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("workout")
}

model WorkoutPlan {
  id          Int                   @id @default(autoincrement())
  userId      String
  user        User                  @relation(fields: [userId], references: [id])
  name        String
  daysPerWeek Int
  exercises   WorkoutPlanExercise[]
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt

  @@map("workoutPlan")
}

model WorkoutPlanExercise {
  id              Int      @id @default(autoincrement())
  workoutPlanId   Int
  exerciseId      Int
  dayOfWeek       Int
  sets            Int
  reps            Int
  restTimeSeconds Int
  createdAt       DateTime @default(now())

  workoutPlan WorkoutPlan @relation(fields: [workoutPlanId], references: [id])
  exercise    Exercise    @relation(fields: [exerciseId], references: [id])

  @@map("workoutPlanExercise")
}

model Exercise {
  id                   Int                   @id @default(autoincrement())
  name                 String
  bodyPart             String?
  category             String?
  difficulty           String?
  equipmentRequired    String?
  instructions         String?
  videoUrl             String?
  workoutPlanExercises WorkoutPlanExercise[]
  createdAt            DateTime              @default(now())

  @@map("exercise")
}

model DietPlan {
  id             Int            @id @default(autoincrement())
  userId         String
  user           User           @relation(fields: [userId], references: [id])
  name           String
  goal           String?
  meals          DietPlanMeal[]
  caloriesPerDay Int
  proteinGrams   Int
  carbsGrams     Int
  fatsGrams      Int
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  @@map("dietPlan")
}

model DietPlanMeal {
  id           Int      @id @default(autoincrement())
  dietPlanId   Int
  mealType     String
  name         String
  description  String?
  calories     Int
  proteinGrams Int
  carbsGrams   Int
  fatsGrams    Int
  createdAt    DateTime @default(now())

  dietPlan DietPlan @relation(fields: [dietPlanId], references: [id])

  @@map("dietPlanMeal")
}

model Meeting {
  id              Int      @id @default(autoincrement())
  userId          String
  trainerId       String
  scheduledAt     DateTime
  durationMinutes Int
  status          MeetingStatus @default(PENDING)
  creditsUsed     Int
  notes           String?
  createdAt       DateTime @default(now())

  user    User @relation("UserMeetings", fields: [userId], references: [id])
  trainer User @relation("TrainerMeetings", fields: [trainerId], references: [id])

  @@map("meeting")
}

enum MeetingStatus {
  PENDING
  ACCEPTED
  DECLINED
  COMPLETED
}

model Payment {
  id               Int      @id @default(autoincrement())
  userId           String
  user             User     @relation(fields: [userId], references: [id])
  amount           Decimal  @db.Decimal(10, 2)
  paymentMethod    String
  creditsPurchased Int
  transactionId    String?
  status           String
  createdAt        DateTime @default(now())

  @@map("payment")
}


enum Role {
  USER
  TRAINER
  ADMIN
}